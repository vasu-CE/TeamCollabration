// This is your updated Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum Department {
  CE
  CSE
  IT
}

enum Institute {
  CSPIT
  DEPSTAR
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id         String     @id @unique @default(uuid())
  email      String     @unique
  name       String
  password   String
  role       UserRole   @default(STUDENT)
  department Department
  institute  Institute
  Student    Student[]  @relation("StudentRef")
  Faculty    Faculty[]  @relation("FacultyRef")
  Admin      Admin[]    @relation("AdminRef")

  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
}

model Student {
  id                 String @id @unique @default(uuid())
  user               User   @relation("StudentRef", fields: [userId], references: [id])
  userId             String @unique
  current_study_year String
  passing_year       String

  batch       String
  marks       Mark[]        @relation("StudentMarks")
  JoinRequest JoinRequest[]
  teams       Team[] // Many-to-many relation with Team
  leaderOf    Team[]        @relation("TeamLeader")
}

model Team {
  id            String        @id @unique @default(uuid())
  name          String
  leader        Student?      @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId      String?
  students      Student[] // Many-to-many relation with Student
  studentsCount Int           @default(0)
  teamCode      String        @unique
  JoinRequest   JoinRequest[]
  projects      Project[]
  Message       Message[]     @relation("TeamMessages")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model JoinRequest {
  id        String            @id @default(uuid())
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  student   Student           @relation(fields: [studentId], references: [id])
  studentId String
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
}

model Project {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String
  technology  String[]
  status      Status
  gitHubLink  String   @default("")
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  isUnderSgp  Boolean  @default(false)
  // For SGP projects, a non-null semester (e.g. "Fall 2025") must be provided.
  // Normal projects should leave this as null.
  semester    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // This composite unique constraint enforces that, for any given team,
  // only one project per semester can have a non-null semester value.
  @@unique([teamId, semester])
}

model Faculty {
  id     Int    @id @unique @default(autoincrement())
  user   User   @relation("FacultyRef", fields: [userId], references: [id])
  userId String @unique
}

model Admin {
  id         Int        @id @unique @default(autoincrement())
  user       User       @relation("AdminRef", fields: [userId], references: [id])
  userId     String     @unique
  department Department
}

model Mark {
  id        Int     @id @unique @default(autoincrement())
  internal1 Int
  internal2 Int?
  external  Int?
  student   Student @relation("StudentMarks", fields: [studentId], references: [id])
  studentId String
}

model Message {
  id         String   @id @unique @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  team       Team     @relation("TeamMessages", fields: [teamId], references: [id]) // Corrected relation
  teamId     String // Ensures messages are linked to a team
  text       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
